// Generated by gencpp from file cola2_msgs/ActionRequest.msg
// DO NOT EDIT!


#ifndef COLA2_MSGS_MESSAGE_ACTIONREQUEST_H
#define COLA2_MSGS_MESSAGE_ACTIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cola2_msgs
{
template <class ContainerAllocator>
struct ActionRequest_
{
  typedef ActionRequest_<ContainerAllocator> Type;

  ActionRequest_()
    : param()  {
    }
  ActionRequest_(const ContainerAllocator& _alloc)
    : param(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _param_type;
  _param_type param;





  typedef boost::shared_ptr< ::cola2_msgs::ActionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cola2_msgs::ActionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ActionRequest_

typedef ::cola2_msgs::ActionRequest_<std::allocator<void> > ActionRequest;

typedef boost::shared_ptr< ::cola2_msgs::ActionRequest > ActionRequestPtr;
typedef boost::shared_ptr< ::cola2_msgs::ActionRequest const> ActionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cola2_msgs::ActionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cola2_msgs::ActionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cola2_msgs::ActionRequest_<ContainerAllocator1> & lhs, const ::cola2_msgs::ActionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.param == rhs.param;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cola2_msgs::ActionRequest_<ContainerAllocator1> & lhs, const ::cola2_msgs::ActionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cola2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::ActionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::ActionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::ActionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::ActionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::ActionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::ActionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cola2_msgs::ActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b488dead6aada023b718e09603f3c6bb";
  }

  static const char* value(const ::cola2_msgs::ActionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb488dead6aada023ULL;
  static const uint64_t static_value2 = 0xb718e09603f3c6bbULL;
};

template<class ContainerAllocator>
struct DataType< ::cola2_msgs::ActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cola2_msgs/ActionRequest";
  }

  static const char* value(const ::cola2_msgs::ActionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cola2_msgs::ActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] param\n"
;
  }

  static const char* value(const ::cola2_msgs::ActionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cola2_msgs::ActionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.param);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cola2_msgs::ActionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cola2_msgs::ActionRequest_<ContainerAllocator>& v)
  {
    s << indent << "param[]" << std::endl;
    for (size_t i = 0; i < v.param.size(); ++i)
    {
      s << indent << "  param[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.param[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLA2_MSGS_MESSAGE_ACTIONREQUEST_H
