// Generated by gencpp from file cola2_msgs/PilotResult.msg
// DO NOT EDIT!


#ifndef COLA2_MSGS_MESSAGE_PILOTRESULT_H
#define COLA2_MSGS_MESSAGE_PILOTRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cola2_msgs
{
template <class ContainerAllocator>
struct PilotResult_
{
  typedef PilotResult_<ContainerAllocator> Type;

  PilotResult_()
    : state(0)  {
    }
  PilotResult_(const ContainerAllocator& _alloc)
    : state(0)  {
  (void)_alloc;
    }



   typedef uint64_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(TIMEOUT)
  #undef TIMEOUT
#endif
#if defined(_WIN32) && defined(FAILURE)
  #undef FAILURE
#endif

  enum {
    SUCCESS = 0u,
    TIMEOUT = 1u,
    FAILURE = 2u,
  };


  typedef boost::shared_ptr< ::cola2_msgs::PilotResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cola2_msgs::PilotResult_<ContainerAllocator> const> ConstPtr;

}; // struct PilotResult_

typedef ::cola2_msgs::PilotResult_<std::allocator<void> > PilotResult;

typedef boost::shared_ptr< ::cola2_msgs::PilotResult > PilotResultPtr;
typedef boost::shared_ptr< ::cola2_msgs::PilotResult const> PilotResultConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cola2_msgs::PilotResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cola2_msgs::PilotResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cola2_msgs::PilotResult_<ContainerAllocator1> & lhs, const ::cola2_msgs::PilotResult_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cola2_msgs::PilotResult_<ContainerAllocator1> & lhs, const ::cola2_msgs::PilotResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cola2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::PilotResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::PilotResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::PilotResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::PilotResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::PilotResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::PilotResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cola2_msgs::PilotResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "27ba8f4a492a7897c4adf64391e75b6a";
  }

  static const char* value(const ::cola2_msgs::PilotResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x27ba8f4a492a7897ULL;
  static const uint64_t static_value2 = 0xc4adf64391e75b6aULL;
};

template<class ContainerAllocator>
struct DataType< ::cola2_msgs::PilotResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cola2_msgs/PilotResult";
  }

  static const char* value(const ::cola2_msgs::PilotResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cola2_msgs::PilotResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the RESULT\n"
"\n"
"# State\n"
"uint64 state\n"
"uint64 SUCCESS=0\n"
"uint64 TIMEOUT=1\n"
"uint64 FAILURE=2\n"
"\n"
;
  }

  static const char* value(const ::cola2_msgs::PilotResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cola2_msgs::PilotResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PilotResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cola2_msgs::PilotResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cola2_msgs::PilotResult_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLA2_MSGS_MESSAGE_PILOTRESULT_H
