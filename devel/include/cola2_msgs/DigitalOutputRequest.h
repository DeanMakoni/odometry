// Generated by gencpp from file cola2_msgs/DigitalOutputRequest.msg
// DO NOT EDIT!


#ifndef COLA2_MSGS_MESSAGE_DIGITALOUTPUTREQUEST_H
#define COLA2_MSGS_MESSAGE_DIGITALOUTPUTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cola2_msgs
{
template <class ContainerAllocator>
struct DigitalOutputRequest_
{
  typedef DigitalOutputRequest_<ContainerAllocator> Type;

  DigitalOutputRequest_()
    : digital_output(0)
    , value(0)  {
    }
  DigitalOutputRequest_(const ContainerAllocator& _alloc)
    : digital_output(0)
    , value(0)  {
  (void)_alloc;
    }



   typedef int32_t _digital_output_type;
  _digital_output_type digital_output;

   typedef int32_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DigitalOutputRequest_

typedef ::cola2_msgs::DigitalOutputRequest_<std::allocator<void> > DigitalOutputRequest;

typedef boost::shared_ptr< ::cola2_msgs::DigitalOutputRequest > DigitalOutputRequestPtr;
typedef boost::shared_ptr< ::cola2_msgs::DigitalOutputRequest const> DigitalOutputRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator1> & lhs, const ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator2> & rhs)
{
  return lhs.digital_output == rhs.digital_output &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator1> & lhs, const ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cola2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69b2cf19944fe5efe68a758e1ff6c644";
  }

  static const char* value(const ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69b2cf19944fe5efULL;
  static const uint64_t static_value2 = 0xe68a758e1ff6c644ULL;
};

template<class ContainerAllocator>
struct DataType< ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cola2_msgs/DigitalOutputRequest";
  }

  static const char* value(const ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 digital_output\n"
"int32 value\n"
;
  }

  static const char* value(const ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.digital_output);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DigitalOutputRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cola2_msgs::DigitalOutputRequest_<ContainerAllocator>& v)
  {
    s << indent << "digital_output: ";
    Printer<int32_t>::stream(s, indent + "  ", v.digital_output);
    s << indent << "value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLA2_MSGS_MESSAGE_DIGITALOUTPUTREQUEST_H
