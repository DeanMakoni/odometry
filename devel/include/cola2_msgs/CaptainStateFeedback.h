// Generated by gencpp from file cola2_msgs/CaptainStateFeedback.msg
// DO NOT EDIT!


#ifndef COLA2_MSGS_MESSAGE_CAPTAINSTATEFEEDBACK_H
#define COLA2_MSGS_MESSAGE_CAPTAINSTATEFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <cola2_msgs/KeyValue.h>

namespace cola2_msgs
{
template <class ContainerAllocator>
struct CaptainStateFeedback_
{
  typedef CaptainStateFeedback_<ContainerAllocator> Type;

  CaptainStateFeedback_()
    : header()
    , state(0)
    , time_to_finish(0.0)
    , name()
    , id(0)
    , keyvalues()  {
    }
  CaptainStateFeedback_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(0)
    , time_to_finish(0.0)
    , name(_alloc)
    , id(0)
    , keyvalues(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _state_type;
  _state_type state;

   typedef double _time_to_finish_type;
  _time_to_finish_type time_to_finish;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint16_t _id_type;
  _id_type id;

   typedef std::vector< ::cola2_msgs::KeyValue_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cola2_msgs::KeyValue_<ContainerAllocator> >> _keyvalues_type;
  _keyvalues_type keyvalues;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ACTIVE)
  #undef ACTIVE
#endif
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(FAILURE)
  #undef FAILURE
#endif
#if defined(_WIN32) && defined(STOPPED)
  #undef STOPPED
#endif

  enum {
    ACTIVE = 0u,
    SUCCESS = 1u,
    FAILURE = 2u,
    STOPPED = 3u,
  };


  typedef boost::shared_ptr< ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct CaptainStateFeedback_

typedef ::cola2_msgs::CaptainStateFeedback_<std::allocator<void> > CaptainStateFeedback;

typedef boost::shared_ptr< ::cola2_msgs::CaptainStateFeedback > CaptainStateFeedbackPtr;
typedef boost::shared_ptr< ::cola2_msgs::CaptainStateFeedback const> CaptainStateFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator1> & lhs, const ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state == rhs.state &&
    lhs.time_to_finish == rhs.time_to_finish &&
    lhs.name == rhs.name &&
    lhs.id == rhs.id &&
    lhs.keyvalues == rhs.keyvalues;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator1> & lhs, const ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cola2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "afefd4ce4fb740bbeb3fade79326e0f7";
  }

  static const char* value(const ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xafefd4ce4fb740bbULL;
  static const uint64_t static_value2 = 0xeb3fade79326e0f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cola2_msgs/CaptainStateFeedback";
  }

  static const char* value(const ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# State\n"
"uint8 ACTIVE = 0\n"
"uint8 SUCCESS = 1\n"
"uint8 FAILURE = 2\n"
"uint8 STOPPED = 3\n"
"uint8 state\n"
"\n"
"# An estimate of the remaining time\n"
"float64 time_to_finish\n"
"\n"
"# Name of the mode\n"
"string name\n"
"\n"
"# Always increasing id assigned by the captain\n"
"uint16 id\n"
"\n"
"# Extra information as a key-value list\n"
"cola2_msgs/KeyValue[] keyvalues\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: cola2_msgs/KeyValue\n"
"string key\n"
"string value\n"
;
  }

  static const char* value(const ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
      stream.next(m.time_to_finish);
      stream.next(m.name);
      stream.next(m.id);
      stream.next(m.keyvalues);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CaptainStateFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cola2_msgs::CaptainStateFeedback_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "time_to_finish: ";
    Printer<double>::stream(s, indent + "  ", v.time_to_finish);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "keyvalues[]" << std::endl;
    for (size_t i = 0; i < v.keyvalues.size(); ++i)
    {
      s << indent << "  keyvalues[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cola2_msgs::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.keyvalues[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLA2_MSGS_MESSAGE_CAPTAINSTATEFEEDBACK_H
