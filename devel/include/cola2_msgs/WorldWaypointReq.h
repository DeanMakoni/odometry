// Generated by gencpp from file cola2_msgs/WorldWaypointReq.msg
// DO NOT EDIT!


#ifndef COLA2_MSGS_MESSAGE_WORLDWAYPOINTREQ_H
#define COLA2_MSGS_MESSAGE_WORLDWAYPOINTREQ_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <cola2_msgs/GoalDescriptor.h>
#include <cola2_msgs/NED.h>
#include <cola2_msgs/RPY.h>
#include <cola2_msgs/Bool6Axis.h>
#include <geometry_msgs/Vector3.h>
#include <cola2_msgs/RPY.h>

namespace cola2_msgs
{
template <class ContainerAllocator>
struct WorldWaypointReq_
{
  typedef WorldWaypointReq_<ContainerAllocator> Type;

  WorldWaypointReq_()
    : header()
    , goal()
    , altitude_mode(false)
    , position()
    , altitude(0.0)
    , orientation()
    , disable_axis()
    , position_tolerance()
    , orientation_tolerance()  {
    }
  WorldWaypointReq_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , goal(_alloc)
    , altitude_mode(false)
    , position(_alloc)
    , altitude(0.0)
    , orientation(_alloc)
    , disable_axis(_alloc)
    , position_tolerance(_alloc)
    , orientation_tolerance(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::cola2_msgs::GoalDescriptor_<ContainerAllocator>  _goal_type;
  _goal_type goal;

   typedef uint8_t _altitude_mode_type;
  _altitude_mode_type altitude_mode;

   typedef  ::cola2_msgs::NED_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef float _altitude_type;
  _altitude_type altitude;

   typedef  ::cola2_msgs::RPY_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef  ::cola2_msgs::Bool6Axis_<ContainerAllocator>  _disable_axis_type;
  _disable_axis_type disable_axis;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_tolerance_type;
  _position_tolerance_type position_tolerance;

   typedef  ::cola2_msgs::RPY_<ContainerAllocator>  _orientation_tolerance_type;
  _orientation_tolerance_type orientation_tolerance;





  typedef boost::shared_ptr< ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> const> ConstPtr;

}; // struct WorldWaypointReq_

typedef ::cola2_msgs::WorldWaypointReq_<std::allocator<void> > WorldWaypointReq;

typedef boost::shared_ptr< ::cola2_msgs::WorldWaypointReq > WorldWaypointReqPtr;
typedef boost::shared_ptr< ::cola2_msgs::WorldWaypointReq const> WorldWaypointReqConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cola2_msgs::WorldWaypointReq_<ContainerAllocator1> & lhs, const ::cola2_msgs::WorldWaypointReq_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.goal == rhs.goal &&
    lhs.altitude_mode == rhs.altitude_mode &&
    lhs.position == rhs.position &&
    lhs.altitude == rhs.altitude &&
    lhs.orientation == rhs.orientation &&
    lhs.disable_axis == rhs.disable_axis &&
    lhs.position_tolerance == rhs.position_tolerance &&
    lhs.orientation_tolerance == rhs.orientation_tolerance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cola2_msgs::WorldWaypointReq_<ContainerAllocator1> & lhs, const ::cola2_msgs::WorldWaypointReq_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cola2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> >
{
  static const char* value()
  {
    return "768d0aca8857ca6850f95e4b0acf093d";
  }

  static const char* value(const ::cola2_msgs::WorldWaypointReq_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x768d0aca8857ca68ULL;
  static const uint64_t static_value2 = 0x50f95e4b0acf093dULL;
};

template<class ContainerAllocator>
struct DataType< ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cola2_msgs/WorldWaypointReq";
  }

  static const char* value(const ::cola2_msgs::WorldWaypointReq_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# World frame (absolute) waypoint request to pilot.\n"
"# A new waypoint request should contain a different goal.id\n"
"# (incremented) from previous requests. This same message should then\n"
"# be re-sent at 5-10 Hz.\n"
"\n"
"Header header\n"
"\n"
"# Common waypoint details\n"
"GoalDescriptor goal\n"
"\n"
"# If true, maintain Z position relative to altitude, otherwise depth.\n"
"bool altitude_mode\n"
"\n"
"cola2_msgs/NED position\n"
"float32 altitude\n"
"RPY orientation\n"
"\n"
"# Axes of control to disable, in body frame.\n"
"Bool6Axis disable_axis\n"
"\n"
"# Tolerances are in body frame, zero indicates pilot default should be used.\n"
"geometry_msgs/Vector3 position_tolerance\n"
"RPY orientation_tolerance\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: cola2_msgs/GoalDescriptor\n"
"# Contains values common to all waypoint request and status messages.\n"
"# Waypoint goals with higher priority trump lower priority goals. For\n"
"# goals of the same priority, the pilot should follow the latest\n"
"# received.\n"
"\n"
"# Name of the requesting node, used with id to identify the request.\n"
"string requester\n"
"\n"
"uint32 priority\n"
"\n"
"# PRIORITY DEFINITIONS\n"
"uint32 PRIORITY_TELEOPERATION_LOW = 0\n"
"uint32 PRIORITY_SAFETY_LOW = 5\n"
"uint32 PRIORITY_NORMAL = 10\n"
"uint32 PRIORITY_SAFETY = 30\n"
"uint32 PRIORITY_TELEOPERATION = 40\n"
"uint32 PRIORITY_SAFETY_HIGH  = 50\n"
"uint32 PRIORITY_TELEOPERATION_HIGH = 60\n"
"\n"
"================================================================================\n"
"MSG: cola2_msgs/NED\n"
"# Position or velocity in the right-handed NED coordinate frame.\n"
"\n"
"# metres north, positive towards true north.\n"
"float64 north\n"
"\n"
"# metres east, positive towards true east.\n"
"float64 east\n"
"\n"
"# metres down, positive towards the centre of the earth.\n"
"float64 depth\n"
"\n"
"================================================================================\n"
"MSG: cola2_msgs/RPY\n"
"# Orientation or orientation velocity in a frame consistent with the right-handed NED coordinate frame.\n"
"\n"
"# Fixed-axis roll, in radians. Positive clockwise rotation about the X axis, looking forward.\n"
"float32 roll\n"
"\n"
"# Fixed-axis pitch, in radians. Positive upwards rotation of the vehicle nose about the Y axis.\n"
"float32 pitch\n"
"\n"
"# Fixed-axis yaw, in radians. Positive clockwise rotation about the Z axis, looking down.\n"
"float32 yaw\n"
"\n"
"\n"
"================================================================================\n"
"MSG: cola2_msgs/Bool6Axis\n"
"bool x\n"
"bool y\n"
"bool z\n"
"bool roll\n"
"bool pitch\n"
"bool yaw\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cola2_msgs::WorldWaypointReq_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goal);
      stream.next(m.altitude_mode);
      stream.next(m.position);
      stream.next(m.altitude);
      stream.next(m.orientation);
      stream.next(m.disable_axis);
      stream.next(m.position_tolerance);
      stream.next(m.orientation_tolerance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorldWaypointReq_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cola2_msgs::WorldWaypointReq_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cola2_msgs::WorldWaypointReq_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "altitude_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.altitude_mode);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::cola2_msgs::NED_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::cola2_msgs::RPY_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "disable_axis: ";
    s << std::endl;
    Printer< ::cola2_msgs::Bool6Axis_<ContainerAllocator> >::stream(s, indent + "  ", v.disable_axis);
    s << indent << "position_tolerance: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position_tolerance);
    s << indent << "orientation_tolerance: ";
    s << std::endl;
    Printer< ::cola2_msgs::RPY_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation_tolerance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLA2_MSGS_MESSAGE_WORLDWAYPOINTREQ_H
