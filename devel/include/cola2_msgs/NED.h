// Generated by gencpp from file cola2_msgs/NED.msg
// DO NOT EDIT!


#ifndef COLA2_MSGS_MESSAGE_NED_H
#define COLA2_MSGS_MESSAGE_NED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cola2_msgs
{
template <class ContainerAllocator>
struct NED_
{
  typedef NED_<ContainerAllocator> Type;

  NED_()
    : north(0.0)
    , east(0.0)
    , depth(0.0)  {
    }
  NED_(const ContainerAllocator& _alloc)
    : north(0.0)
    , east(0.0)
    , depth(0.0)  {
  (void)_alloc;
    }



   typedef double _north_type;
  _north_type north;

   typedef double _east_type;
  _east_type east;

   typedef double _depth_type;
  _depth_type depth;





  typedef boost::shared_ptr< ::cola2_msgs::NED_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cola2_msgs::NED_<ContainerAllocator> const> ConstPtr;

}; // struct NED_

typedef ::cola2_msgs::NED_<std::allocator<void> > NED;

typedef boost::shared_ptr< ::cola2_msgs::NED > NEDPtr;
typedef boost::shared_ptr< ::cola2_msgs::NED const> NEDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cola2_msgs::NED_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cola2_msgs::NED_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cola2_msgs::NED_<ContainerAllocator1> & lhs, const ::cola2_msgs::NED_<ContainerAllocator2> & rhs)
{
  return lhs.north == rhs.north &&
    lhs.east == rhs.east &&
    lhs.depth == rhs.depth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cola2_msgs::NED_<ContainerAllocator1> & lhs, const ::cola2_msgs::NED_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cola2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::NED_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::NED_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::NED_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::NED_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::NED_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::NED_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cola2_msgs::NED_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a16ce817ea5a7912b32dfb04540797b";
  }

  static const char* value(const ::cola2_msgs::NED_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a16ce817ea5a791ULL;
  static const uint64_t static_value2 = 0x2b32dfb04540797bULL;
};

template<class ContainerAllocator>
struct DataType< ::cola2_msgs::NED_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cola2_msgs/NED";
  }

  static const char* value(const ::cola2_msgs::NED_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cola2_msgs::NED_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Position or velocity in the right-handed NED coordinate frame.\n"
"\n"
"# metres north, positive towards true north.\n"
"float64 north\n"
"\n"
"# metres east, positive towards true east.\n"
"float64 east\n"
"\n"
"# metres down, positive towards the centre of the earth.\n"
"float64 depth\n"
;
  }

  static const char* value(const ::cola2_msgs::NED_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cola2_msgs::NED_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.north);
      stream.next(m.east);
      stream.next(m.depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NED_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cola2_msgs::NED_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cola2_msgs::NED_<ContainerAllocator>& v)
  {
    s << indent << "north: ";
    Printer<double>::stream(s, indent + "  ", v.north);
    s << indent << "east: ";
    Printer<double>::stream(s, indent + "  ", v.east);
    s << indent << "depth: ";
    Printer<double>::stream(s, indent + "  ", v.depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLA2_MSGS_MESSAGE_NED_H
