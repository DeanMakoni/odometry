// Generated by gencpp from file cola2_msgs/ImageAcquisitionSettings.msg
// DO NOT EDIT!


#ifndef COLA2_MSGS_MESSAGE_IMAGEACQUISITIONSETTINGS_H
#define COLA2_MSGS_MESSAGE_IMAGEACQUISITIONSETTINGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <cola2_msgs/KeyValue.h>

namespace cola2_msgs
{
template <class ContainerAllocator>
struct ImageAcquisitionSettings_
{
  typedef ImageAcquisitionSettings_<ContainerAllocator> Type;

  ImageAcquisitionSettings_()
    : header()
    , exposure_time(0)
    , gain(0.0)
    , blue_ratio(0.0)
    , red_ratio(0.0)
    , focus(0.0)
    , aperture(0.0)
    , focal_length(0.0)
    , extra()  {
    }
  ImageAcquisitionSettings_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , exposure_time(0)
    , gain(0.0)
    , blue_ratio(0.0)
    , red_ratio(0.0)
    , focus(0.0)
    , aperture(0.0)
    , focal_length(0.0)
    , extra(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _exposure_time_type;
  _exposure_time_type exposure_time;

   typedef double _gain_type;
  _gain_type gain;

   typedef double _blue_ratio_type;
  _blue_ratio_type blue_ratio;

   typedef double _red_ratio_type;
  _red_ratio_type red_ratio;

   typedef double _focus_type;
  _focus_type focus;

   typedef double _aperture_type;
  _aperture_type aperture;

   typedef double _focal_length_type;
  _focal_length_type focal_length;

   typedef std::vector< ::cola2_msgs::KeyValue_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cola2_msgs::KeyValue_<ContainerAllocator> >> _extra_type;
  _extra_type extra;





  typedef boost::shared_ptr< ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> const> ConstPtr;

}; // struct ImageAcquisitionSettings_

typedef ::cola2_msgs::ImageAcquisitionSettings_<std::allocator<void> > ImageAcquisitionSettings;

typedef boost::shared_ptr< ::cola2_msgs::ImageAcquisitionSettings > ImageAcquisitionSettingsPtr;
typedef boost::shared_ptr< ::cola2_msgs::ImageAcquisitionSettings const> ImageAcquisitionSettingsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator1> & lhs, const ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.exposure_time == rhs.exposure_time &&
    lhs.gain == rhs.gain &&
    lhs.blue_ratio == rhs.blue_ratio &&
    lhs.red_ratio == rhs.red_ratio &&
    lhs.focus == rhs.focus &&
    lhs.aperture == rhs.aperture &&
    lhs.focal_length == rhs.focal_length &&
    lhs.extra == rhs.extra;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator1> & lhs, const ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cola2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "96d48fe2b8fa7d286d513edba3e44323";
  }

  static const char* value(const ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x96d48fe2b8fa7d28ULL;
  static const uint64_t static_value2 = 0x6d513edba3e44323ULL;
};

template<class ContainerAllocator>
struct DataType< ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cola2_msgs/ImageAcquisitionSettings";
  }

  static const char* value(const ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# Exposure time in us (microseonds)\n"
"uint32 exposure_time\n"
"# Gain in dB\n"
"float64 gain\n"
"# White balance blue ratio\n"
"float64 blue_ratio\n"
"# White balance red ratio\n"
"float64 red_ratio\n"
"# Focus distance (m)\n"
"float64 focus\n"
"# Aperture (f/#)\n"
"float64 aperture\n"
"#Focal length according to lens manufacturer (mm)\n"
"float64 focal_length\n"
"# Extra information\n"
"cola2_msgs/KeyValue[] extra\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: cola2_msgs/KeyValue\n"
"string key\n"
"string value\n"
;
  }

  static const char* value(const ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.exposure_time);
      stream.next(m.gain);
      stream.next(m.blue_ratio);
      stream.next(m.red_ratio);
      stream.next(m.focus);
      stream.next(m.aperture);
      stream.next(m.focal_length);
      stream.next(m.extra);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageAcquisitionSettings_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cola2_msgs::ImageAcquisitionSettings_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "exposure_time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.exposure_time);
    s << indent << "gain: ";
    Printer<double>::stream(s, indent + "  ", v.gain);
    s << indent << "blue_ratio: ";
    Printer<double>::stream(s, indent + "  ", v.blue_ratio);
    s << indent << "red_ratio: ";
    Printer<double>::stream(s, indent + "  ", v.red_ratio);
    s << indent << "focus: ";
    Printer<double>::stream(s, indent + "  ", v.focus);
    s << indent << "aperture: ";
    Printer<double>::stream(s, indent + "  ", v.aperture);
    s << indent << "focal_length: ";
    Printer<double>::stream(s, indent + "  ", v.focal_length);
    s << indent << "extra[]" << std::endl;
    for (size_t i = 0; i < v.extra.size(); ++i)
    {
      s << indent << "  extra[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cola2_msgs::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.extra[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLA2_MSGS_MESSAGE_IMAGEACQUISITIONSETTINGS_H
