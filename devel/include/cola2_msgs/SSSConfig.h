// Generated by gencpp from file cola2_msgs/SSSConfig.msg
// DO NOT EDIT!


#ifndef COLA2_MSGS_MESSAGE_SSSCONFIG_H
#define COLA2_MSGS_MESSAGE_SSSCONFIG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace cola2_msgs
{
template <class ContainerAllocator>
struct SSSConfig_
{
  typedef SSSConfig_<ContainerAllocator> Type;

  SSSConfig_()
    : header()
    , samples_per_channel(0)
    , range_delay(0.0)
    , range(0.0)
    , horizontal_beam_angle(0.0)
    , vertical_beam_angle(0.0)
    , speed_of_sound(0.0)
    , ping_rate(0.0)
    , frequency(0.0)  {
    }
  SSSConfig_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , samples_per_channel(0)
    , range_delay(0.0)
    , range(0.0)
    , horizontal_beam_angle(0.0)
    , vertical_beam_angle(0.0)
    , speed_of_sound(0.0)
    , ping_rate(0.0)
    , frequency(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _samples_per_channel_type;
  _samples_per_channel_type samples_per_channel;

   typedef double _range_delay_type;
  _range_delay_type range_delay;

   typedef double _range_type;
  _range_type range;

   typedef double _horizontal_beam_angle_type;
  _horizontal_beam_angle_type horizontal_beam_angle;

   typedef double _vertical_beam_angle_type;
  _vertical_beam_angle_type vertical_beam_angle;

   typedef double _speed_of_sound_type;
  _speed_of_sound_type speed_of_sound;

   typedef double _ping_rate_type;
  _ping_rate_type ping_rate;

   typedef double _frequency_type;
  _frequency_type frequency;





  typedef boost::shared_ptr< ::cola2_msgs::SSSConfig_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cola2_msgs::SSSConfig_<ContainerAllocator> const> ConstPtr;

}; // struct SSSConfig_

typedef ::cola2_msgs::SSSConfig_<std::allocator<void> > SSSConfig;

typedef boost::shared_ptr< ::cola2_msgs::SSSConfig > SSSConfigPtr;
typedef boost::shared_ptr< ::cola2_msgs::SSSConfig const> SSSConfigConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cola2_msgs::SSSConfig_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cola2_msgs::SSSConfig_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cola2_msgs::SSSConfig_<ContainerAllocator1> & lhs, const ::cola2_msgs::SSSConfig_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.samples_per_channel == rhs.samples_per_channel &&
    lhs.range_delay == rhs.range_delay &&
    lhs.range == rhs.range &&
    lhs.horizontal_beam_angle == rhs.horizontal_beam_angle &&
    lhs.vertical_beam_angle == rhs.vertical_beam_angle &&
    lhs.speed_of_sound == rhs.speed_of_sound &&
    lhs.ping_rate == rhs.ping_rate &&
    lhs.frequency == rhs.frequency;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cola2_msgs::SSSConfig_<ContainerAllocator1> & lhs, const ::cola2_msgs::SSSConfig_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cola2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::SSSConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::SSSConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::SSSConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::SSSConfig_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::SSSConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::SSSConfig_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cola2_msgs::SSSConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64f9d5e370a88668538a0266b9541ab7";
  }

  static const char* value(const ::cola2_msgs::SSSConfig_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64f9d5e370a88668ULL;
  static const uint64_t static_value2 = 0x538a0266b9541ab7ULL;
};

template<class ContainerAllocator>
struct DataType< ::cola2_msgs::SSSConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cola2_msgs/SSSConfig";
  }

  static const char* value(const ::cola2_msgs::SSSConfig_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cola2_msgs::SSSConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint32 samples_per_channel\n"
"\n"
"float64 range_delay #In meters\n"
"float64 range #In meters\n"
"\n"
"float64 horizontal_beam_angle #Radians Set to 0 if unknown.\n"
"float64 vertical_beam_angle #Radians Set to 0 if unknown.\n"
"\n"
"float64 speed_of_sound  #In m/s\n"
"float64 ping_rate #In Hz\n"
"float64 frequency #In Hz\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::cola2_msgs::SSSConfig_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cola2_msgs::SSSConfig_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.samples_per_channel);
      stream.next(m.range_delay);
      stream.next(m.range);
      stream.next(m.horizontal_beam_angle);
      stream.next(m.vertical_beam_angle);
      stream.next(m.speed_of_sound);
      stream.next(m.ping_rate);
      stream.next(m.frequency);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SSSConfig_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cola2_msgs::SSSConfig_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cola2_msgs::SSSConfig_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "samples_per_channel: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.samples_per_channel);
    s << indent << "range_delay: ";
    Printer<double>::stream(s, indent + "  ", v.range_delay);
    s << indent << "range: ";
    Printer<double>::stream(s, indent + "  ", v.range);
    s << indent << "horizontal_beam_angle: ";
    Printer<double>::stream(s, indent + "  ", v.horizontal_beam_angle);
    s << indent << "vertical_beam_angle: ";
    Printer<double>::stream(s, indent + "  ", v.vertical_beam_angle);
    s << indent << "speed_of_sound: ";
    Printer<double>::stream(s, indent + "  ", v.speed_of_sound);
    s << indent << "ping_rate: ";
    Printer<double>::stream(s, indent + "  ", v.ping_rate);
    s << indent << "frequency: ";
    Printer<double>::stream(s, indent + "  ", v.frequency);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLA2_MSGS_MESSAGE_SSSCONFIG_H
