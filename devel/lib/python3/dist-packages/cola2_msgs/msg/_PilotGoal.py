# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cola2_msgs/PilotGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cola2_msgs.msg

class PilotGoal(genpy.Message):
  _md5sum = "bc5e515316b2127f5f22f67e085e5c8d"
  _type = "cola2_msgs/PilotGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the REQUEST

# Initial state
float64 initial_latitude
float64 initial_longitude
float64 initial_depth

# Final state
float64 final_latitude
float64 final_longitude
float64 final_depth
float64 final_yaw
float64 final_altitude

# Heave mode
uint64 heave_mode
uint64 DEPTH=0
uint64 ALTITUDE=1
uint64 BOTH=2

# Surge velocity
float64 surge_velocity

# Tolerance
float64 tolerance_xy

# Timeout
float64 timeout

# Controller type
uint64 controller_type
uint64 SECTION=0
uint64 ANCHOR=1
uint64 HOLONOMIC_KEEP_POSITION=2

# Requester and priority
cola2_msgs/GoalDescriptor goal


================================================================================
MSG: cola2_msgs/GoalDescriptor
# Contains values common to all waypoint request and status messages.
# Waypoint goals with higher priority trump lower priority goals. For
# goals of the same priority, the pilot should follow the latest
# received.

# Name of the requesting node, used with id to identify the request.
string requester

uint32 priority

# PRIORITY DEFINITIONS
uint32 PRIORITY_TELEOPERATION_LOW = 0
uint32 PRIORITY_SAFETY_LOW = 5
uint32 PRIORITY_NORMAL = 10
uint32 PRIORITY_SAFETY = 30
uint32 PRIORITY_TELEOPERATION = 40
uint32 PRIORITY_SAFETY_HIGH  = 50
uint32 PRIORITY_TELEOPERATION_HIGH = 60
"""
  # Pseudo-constants
  DEPTH = 0
  ALTITUDE = 1
  BOTH = 2
  SECTION = 0
  ANCHOR = 1
  HOLONOMIC_KEEP_POSITION = 2

  __slots__ = ['initial_latitude','initial_longitude','initial_depth','final_latitude','final_longitude','final_depth','final_yaw','final_altitude','heave_mode','surge_velocity','tolerance_xy','timeout','controller_type','goal']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','uint64','float64','float64','float64','uint64','cola2_msgs/GoalDescriptor']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       initial_latitude,initial_longitude,initial_depth,final_latitude,final_longitude,final_depth,final_yaw,final_altitude,heave_mode,surge_velocity,tolerance_xy,timeout,controller_type,goal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PilotGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.initial_latitude is None:
        self.initial_latitude = 0.
      if self.initial_longitude is None:
        self.initial_longitude = 0.
      if self.initial_depth is None:
        self.initial_depth = 0.
      if self.final_latitude is None:
        self.final_latitude = 0.
      if self.final_longitude is None:
        self.final_longitude = 0.
      if self.final_depth is None:
        self.final_depth = 0.
      if self.final_yaw is None:
        self.final_yaw = 0.
      if self.final_altitude is None:
        self.final_altitude = 0.
      if self.heave_mode is None:
        self.heave_mode = 0
      if self.surge_velocity is None:
        self.surge_velocity = 0.
      if self.tolerance_xy is None:
        self.tolerance_xy = 0.
      if self.timeout is None:
        self.timeout = 0.
      if self.controller_type is None:
        self.controller_type = 0
      if self.goal is None:
        self.goal = cola2_msgs.msg.GoalDescriptor()
    else:
      self.initial_latitude = 0.
      self.initial_longitude = 0.
      self.initial_depth = 0.
      self.final_latitude = 0.
      self.final_longitude = 0.
      self.final_depth = 0.
      self.final_yaw = 0.
      self.final_altitude = 0.
      self.heave_mode = 0
      self.surge_velocity = 0.
      self.tolerance_xy = 0.
      self.timeout = 0.
      self.controller_type = 0
      self.goal = cola2_msgs.msg.GoalDescriptor()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8dQ3dQ().pack(_x.initial_latitude, _x.initial_longitude, _x.initial_depth, _x.final_latitude, _x.final_longitude, _x.final_depth, _x.final_yaw, _x.final_altitude, _x.heave_mode, _x.surge_velocity, _x.tolerance_xy, _x.timeout, _x.controller_type))
      _x = self.goal.requester
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.goal.priority
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.goal is None:
        self.goal = cola2_msgs.msg.GoalDescriptor()
      end = 0
      _x = self
      start = end
      end += 104
      (_x.initial_latitude, _x.initial_longitude, _x.initial_depth, _x.final_latitude, _x.final_longitude, _x.final_depth, _x.final_yaw, _x.final_altitude, _x.heave_mode, _x.surge_velocity, _x.tolerance_xy, _x.timeout, _x.controller_type,) = _get_struct_8dQ3dQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.requester = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal.requester = str[start:end]
      start = end
      end += 4
      (self.goal.priority,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8dQ3dQ().pack(_x.initial_latitude, _x.initial_longitude, _x.initial_depth, _x.final_latitude, _x.final_longitude, _x.final_depth, _x.final_yaw, _x.final_altitude, _x.heave_mode, _x.surge_velocity, _x.tolerance_xy, _x.timeout, _x.controller_type))
      _x = self.goal.requester
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.goal.priority
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.goal is None:
        self.goal = cola2_msgs.msg.GoalDescriptor()
      end = 0
      _x = self
      start = end
      end += 104
      (_x.initial_latitude, _x.initial_longitude, _x.initial_depth, _x.final_latitude, _x.final_longitude, _x.final_depth, _x.final_yaw, _x.final_altitude, _x.heave_mode, _x.surge_velocity, _x.tolerance_xy, _x.timeout, _x.controller_type,) = _get_struct_8dQ3dQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.requester = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal.requester = str[start:end]
      start = end
      end += 4
      (self.goal.priority,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8dQ3dQ = None
def _get_struct_8dQ3dQ():
    global _struct_8dQ3dQ
    if _struct_8dQ3dQ is None:
        _struct_8dQ3dQ = struct.Struct("<8dQ3dQ")
    return _struct_8dQ3dQ
