# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cola2_msgs/GotoRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GotoRequest(genpy.Message):
  _md5sum = "99d15622a6bf183f635ce6a1882f2224"
  _type = "cola2_msgs/GotoRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Final state
float64 final_x
float64 final_y
float64 final_depth
float64 final_altitude

# Reference frame for both the inital and final positions
uint8 NED=0
uint8 GLOBAL=1
uint8 reference

# Heave mode
uint64 heave_mode
uint64 DEPTH=0
uint64 ALTITUDE=1
uint64 BOTH=2

# Surge velocity
float64 surge_velocity

# Tolerance
float64 tolerance_xy

# Timeout
float64 timeout

# No altitude reactive behavior
bool no_altitude_goes_up

"""
  # Pseudo-constants
  NED = 0
  GLOBAL = 1
  DEPTH = 0
  ALTITUDE = 1
  BOTH = 2

  __slots__ = ['final_x','final_y','final_depth','final_altitude','reference','heave_mode','surge_velocity','tolerance_xy','timeout','no_altitude_goes_up']
  _slot_types = ['float64','float64','float64','float64','uint8','uint64','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       final_x,final_y,final_depth,final_altitude,reference,heave_mode,surge_velocity,tolerance_xy,timeout,no_altitude_goes_up

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GotoRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.final_x is None:
        self.final_x = 0.
      if self.final_y is None:
        self.final_y = 0.
      if self.final_depth is None:
        self.final_depth = 0.
      if self.final_altitude is None:
        self.final_altitude = 0.
      if self.reference is None:
        self.reference = 0
      if self.heave_mode is None:
        self.heave_mode = 0
      if self.surge_velocity is None:
        self.surge_velocity = 0.
      if self.tolerance_xy is None:
        self.tolerance_xy = 0.
      if self.timeout is None:
        self.timeout = 0.
      if self.no_altitude_goes_up is None:
        self.no_altitude_goes_up = False
    else:
      self.final_x = 0.
      self.final_y = 0.
      self.final_depth = 0.
      self.final_altitude = 0.
      self.reference = 0
      self.heave_mode = 0
      self.surge_velocity = 0.
      self.tolerance_xy = 0.
      self.timeout = 0.
      self.no_altitude_goes_up = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4dBQ3dB().pack(_x.final_x, _x.final_y, _x.final_depth, _x.final_altitude, _x.reference, _x.heave_mode, _x.surge_velocity, _x.tolerance_xy, _x.timeout, _x.no_altitude_goes_up))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 66
      (_x.final_x, _x.final_y, _x.final_depth, _x.final_altitude, _x.reference, _x.heave_mode, _x.surge_velocity, _x.tolerance_xy, _x.timeout, _x.no_altitude_goes_up,) = _get_struct_4dBQ3dB().unpack(str[start:end])
      self.no_altitude_goes_up = bool(self.no_altitude_goes_up)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4dBQ3dB().pack(_x.final_x, _x.final_y, _x.final_depth, _x.final_altitude, _x.reference, _x.heave_mode, _x.surge_velocity, _x.tolerance_xy, _x.timeout, _x.no_altitude_goes_up))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 66
      (_x.final_x, _x.final_y, _x.final_depth, _x.final_altitude, _x.reference, _x.heave_mode, _x.surge_velocity, _x.tolerance_xy, _x.timeout, _x.no_altitude_goes_up,) = _get_struct_4dBQ3dB().unpack(str[start:end])
      self.no_altitude_goes_up = bool(self.no_altitude_goes_up)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4dBQ3dB = None
def _get_struct_4dBQ3dB():
    global _struct_4dBQ3dB
    if _struct_4dBQ3dB is None:
        _struct_4dBQ3dB = struct.Struct("<4dBQ3dB")
    return _struct_4dBQ3dB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cola2_msgs/GotoResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GotoResponse(genpy.Message):
  _md5sum = "937c9679a518e3a18d831e57125ea522"
  _type = "cola2_msgs/GotoResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
string message

"""
  __slots__ = ['success','message']
  _slot_types = ['bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GotoResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.message is None:
        self.message = ''
    else:
      self.success = False
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class Goto(object):
  _type          = 'cola2_msgs/Goto'
  _md5sum = 'd7ca42db7492724e2ad137e654c018a7'
  _request_class  = GotoRequest
  _response_class = GotoResponse
