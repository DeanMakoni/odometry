// Generated by gencpp from file cola2_msgs/PilotFeedback.msg
// DO NOT EDIT!


#ifndef COLA2_MSGS_MESSAGE_PILOTFEEDBACK_H
#define COLA2_MSGS_MESSAGE_PILOTFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cola2_msgs
{
template <class ContainerAllocator>
struct PilotFeedback_
{
  typedef PilotFeedback_<ContainerAllocator> Type;

  PilotFeedback_()
    : distance_to_end(0.0)
    , cross_track_error(0.0)  {
    }
  PilotFeedback_(const ContainerAllocator& _alloc)
    : distance_to_end(0.0)
    , cross_track_error(0.0)  {
  (void)_alloc;
    }



   typedef double _distance_to_end_type;
  _distance_to_end_type distance_to_end;

   typedef double _cross_track_error_type;
  _cross_track_error_type cross_track_error;





  typedef boost::shared_ptr< ::cola2_msgs::PilotFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cola2_msgs::PilotFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct PilotFeedback_

typedef ::cola2_msgs::PilotFeedback_<std::allocator<void> > PilotFeedback;

typedef boost::shared_ptr< ::cola2_msgs::PilotFeedback > PilotFeedbackPtr;
typedef boost::shared_ptr< ::cola2_msgs::PilotFeedback const> PilotFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cola2_msgs::PilotFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cola2_msgs::PilotFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cola2_msgs::PilotFeedback_<ContainerAllocator1> & lhs, const ::cola2_msgs::PilotFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.distance_to_end == rhs.distance_to_end &&
    lhs.cross_track_error == rhs.cross_track_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cola2_msgs::PilotFeedback_<ContainerAllocator1> & lhs, const ::cola2_msgs::PilotFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cola2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::PilotFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::PilotFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::PilotFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::PilotFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::PilotFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::PilotFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cola2_msgs::PilotFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d59c9d2fe125e9dbd3a7afe6b7739fc4";
  }

  static const char* value(const ::cola2_msgs::PilotFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd59c9d2fe125e9dbULL;
  static const uint64_t static_value2 = 0xd3a7afe6b7739fc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::cola2_msgs::PilotFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cola2_msgs/PilotFeedback";
  }

  static const char* value(const ::cola2_msgs::PilotFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cola2_msgs::PilotFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define a FEEDBACK\n"
"\n"
"# Errors\n"
"float64 distance_to_end\n"
"float64 cross_track_error\n"
"\n"
;
  }

  static const char* value(const ::cola2_msgs::PilotFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cola2_msgs::PilotFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance_to_end);
      stream.next(m.cross_track_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PilotFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cola2_msgs::PilotFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cola2_msgs::PilotFeedback_<ContainerAllocator>& v)
  {
    s << indent << "distance_to_end: ";
    Printer<double>::stream(s, indent + "  ", v.distance_to_end);
    s << indent << "cross_track_error: ";
    Printer<double>::stream(s, indent + "  ", v.cross_track_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLA2_MSGS_MESSAGE_PILOTFEEDBACK_H
