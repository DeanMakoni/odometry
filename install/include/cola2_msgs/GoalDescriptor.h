// Generated by gencpp from file cola2_msgs/GoalDescriptor.msg
// DO NOT EDIT!


#ifndef COLA2_MSGS_MESSAGE_GOALDESCRIPTOR_H
#define COLA2_MSGS_MESSAGE_GOALDESCRIPTOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cola2_msgs
{
template <class ContainerAllocator>
struct GoalDescriptor_
{
  typedef GoalDescriptor_<ContainerAllocator> Type;

  GoalDescriptor_()
    : requester()
    , priority(0)  {
    }
  GoalDescriptor_(const ContainerAllocator& _alloc)
    : requester(_alloc)
    , priority(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _requester_type;
  _requester_type requester;

   typedef uint32_t _priority_type;
  _priority_type priority;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PRIORITY_TELEOPERATION_LOW)
  #undef PRIORITY_TELEOPERATION_LOW
#endif
#if defined(_WIN32) && defined(PRIORITY_SAFETY_LOW)
  #undef PRIORITY_SAFETY_LOW
#endif
#if defined(_WIN32) && defined(PRIORITY_NORMAL)
  #undef PRIORITY_NORMAL
#endif
#if defined(_WIN32) && defined(PRIORITY_SAFETY)
  #undef PRIORITY_SAFETY
#endif
#if defined(_WIN32) && defined(PRIORITY_TELEOPERATION)
  #undef PRIORITY_TELEOPERATION
#endif
#if defined(_WIN32) && defined(PRIORITY_SAFETY_HIGH)
  #undef PRIORITY_SAFETY_HIGH
#endif
#if defined(_WIN32) && defined(PRIORITY_TELEOPERATION_HIGH)
  #undef PRIORITY_TELEOPERATION_HIGH
#endif

  enum {
    PRIORITY_TELEOPERATION_LOW = 0u,
    PRIORITY_SAFETY_LOW = 5u,
    PRIORITY_NORMAL = 10u,
    PRIORITY_SAFETY = 30u,
    PRIORITY_TELEOPERATION = 40u,
    PRIORITY_SAFETY_HIGH = 50u,
    PRIORITY_TELEOPERATION_HIGH = 60u,
  };


  typedef boost::shared_ptr< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> const> ConstPtr;

}; // struct GoalDescriptor_

typedef ::cola2_msgs::GoalDescriptor_<std::allocator<void> > GoalDescriptor;

typedef boost::shared_ptr< ::cola2_msgs::GoalDescriptor > GoalDescriptorPtr;
typedef boost::shared_ptr< ::cola2_msgs::GoalDescriptor const> GoalDescriptorConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cola2_msgs::GoalDescriptor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cola2_msgs::GoalDescriptor_<ContainerAllocator1> & lhs, const ::cola2_msgs::GoalDescriptor_<ContainerAllocator2> & rhs)
{
  return lhs.requester == rhs.requester &&
    lhs.priority == rhs.priority;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cola2_msgs::GoalDescriptor_<ContainerAllocator1> & lhs, const ::cola2_msgs::GoalDescriptor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cola2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "258dba3ec3a05ff24abe0733c68cf73a";
  }

  static const char* value(const ::cola2_msgs::GoalDescriptor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x258dba3ec3a05ff2ULL;
  static const uint64_t static_value2 = 0x4abe0733c68cf73aULL;
};

template<class ContainerAllocator>
struct DataType< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cola2_msgs/GoalDescriptor";
  }

  static const char* value(const ::cola2_msgs::GoalDescriptor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Contains values common to all waypoint request and status messages.\n"
"# Waypoint goals with higher priority trump lower priority goals. For\n"
"# goals of the same priority, the pilot should follow the latest\n"
"# received.\n"
"\n"
"# Name of the requesting node, used with id to identify the request.\n"
"string requester\n"
"\n"
"uint32 priority\n"
"\n"
"# PRIORITY DEFINITIONS\n"
"uint32 PRIORITY_TELEOPERATION_LOW = 0\n"
"uint32 PRIORITY_SAFETY_LOW = 5\n"
"uint32 PRIORITY_NORMAL = 10\n"
"uint32 PRIORITY_SAFETY = 30\n"
"uint32 PRIORITY_TELEOPERATION = 40\n"
"uint32 PRIORITY_SAFETY_HIGH  = 50\n"
"uint32 PRIORITY_TELEOPERATION_HIGH = 60\n"
;
  }

  static const char* value(const ::cola2_msgs::GoalDescriptor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.requester);
      stream.next(m.priority);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoalDescriptor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cola2_msgs::GoalDescriptor_<ContainerAllocator>& v)
  {
    s << indent << "requester: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.requester);
    s << indent << "priority: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.priority);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLA2_MSGS_MESSAGE_GOALDESCRIPTOR_H
