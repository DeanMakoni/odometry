// Generated by gencpp from file cola2_msgs/PilotGoal.msg
// DO NOT EDIT!


#ifndef COLA2_MSGS_MESSAGE_PILOTGOAL_H
#define COLA2_MSGS_MESSAGE_PILOTGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cola2_msgs/GoalDescriptor.h>

namespace cola2_msgs
{
template <class ContainerAllocator>
struct PilotGoal_
{
  typedef PilotGoal_<ContainerAllocator> Type;

  PilotGoal_()
    : initial_latitude(0.0)
    , initial_longitude(0.0)
    , initial_depth(0.0)
    , final_latitude(0.0)
    , final_longitude(0.0)
    , final_depth(0.0)
    , final_yaw(0.0)
    , final_altitude(0.0)
    , heave_mode(0)
    , surge_velocity(0.0)
    , tolerance_xy(0.0)
    , timeout(0.0)
    , controller_type(0)
    , goal()  {
    }
  PilotGoal_(const ContainerAllocator& _alloc)
    : initial_latitude(0.0)
    , initial_longitude(0.0)
    , initial_depth(0.0)
    , final_latitude(0.0)
    , final_longitude(0.0)
    , final_depth(0.0)
    , final_yaw(0.0)
    , final_altitude(0.0)
    , heave_mode(0)
    , surge_velocity(0.0)
    , tolerance_xy(0.0)
    , timeout(0.0)
    , controller_type(0)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef double _initial_latitude_type;
  _initial_latitude_type initial_latitude;

   typedef double _initial_longitude_type;
  _initial_longitude_type initial_longitude;

   typedef double _initial_depth_type;
  _initial_depth_type initial_depth;

   typedef double _final_latitude_type;
  _final_latitude_type final_latitude;

   typedef double _final_longitude_type;
  _final_longitude_type final_longitude;

   typedef double _final_depth_type;
  _final_depth_type final_depth;

   typedef double _final_yaw_type;
  _final_yaw_type final_yaw;

   typedef double _final_altitude_type;
  _final_altitude_type final_altitude;

   typedef uint64_t _heave_mode_type;
  _heave_mode_type heave_mode;

   typedef double _surge_velocity_type;
  _surge_velocity_type surge_velocity;

   typedef double _tolerance_xy_type;
  _tolerance_xy_type tolerance_xy;

   typedef double _timeout_type;
  _timeout_type timeout;

   typedef uint64_t _controller_type_type;
  _controller_type_type controller_type;

   typedef  ::cola2_msgs::GoalDescriptor_<ContainerAllocator>  _goal_type;
  _goal_type goal;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DEPTH)
  #undef DEPTH
#endif
#if defined(_WIN32) && defined(ALTITUDE)
  #undef ALTITUDE
#endif
#if defined(_WIN32) && defined(BOTH)
  #undef BOTH
#endif
#if defined(_WIN32) && defined(SECTION)
  #undef SECTION
#endif
#if defined(_WIN32) && defined(ANCHOR)
  #undef ANCHOR
#endif
#if defined(_WIN32) && defined(HOLONOMIC_KEEP_POSITION)
  #undef HOLONOMIC_KEEP_POSITION
#endif

  enum {
    DEPTH = 0u,
    ALTITUDE = 1u,
    BOTH = 2u,
    SECTION = 0u,
    ANCHOR = 1u,
    HOLONOMIC_KEEP_POSITION = 2u,
  };


  typedef boost::shared_ptr< ::cola2_msgs::PilotGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cola2_msgs::PilotGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PilotGoal_

typedef ::cola2_msgs::PilotGoal_<std::allocator<void> > PilotGoal;

typedef boost::shared_ptr< ::cola2_msgs::PilotGoal > PilotGoalPtr;
typedef boost::shared_ptr< ::cola2_msgs::PilotGoal const> PilotGoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cola2_msgs::PilotGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cola2_msgs::PilotGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cola2_msgs::PilotGoal_<ContainerAllocator1> & lhs, const ::cola2_msgs::PilotGoal_<ContainerAllocator2> & rhs)
{
  return lhs.initial_latitude == rhs.initial_latitude &&
    lhs.initial_longitude == rhs.initial_longitude &&
    lhs.initial_depth == rhs.initial_depth &&
    lhs.final_latitude == rhs.final_latitude &&
    lhs.final_longitude == rhs.final_longitude &&
    lhs.final_depth == rhs.final_depth &&
    lhs.final_yaw == rhs.final_yaw &&
    lhs.final_altitude == rhs.final_altitude &&
    lhs.heave_mode == rhs.heave_mode &&
    lhs.surge_velocity == rhs.surge_velocity &&
    lhs.tolerance_xy == rhs.tolerance_xy &&
    lhs.timeout == rhs.timeout &&
    lhs.controller_type == rhs.controller_type &&
    lhs.goal == rhs.goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cola2_msgs::PilotGoal_<ContainerAllocator1> & lhs, const ::cola2_msgs::PilotGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cola2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::PilotGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::PilotGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::PilotGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::PilotGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::PilotGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::PilotGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cola2_msgs::PilotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc5e515316b2127f5f22f67e085e5c8d";
  }

  static const char* value(const ::cola2_msgs::PilotGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc5e515316b2127fULL;
  static const uint64_t static_value2 = 0x5f22f67e085e5c8dULL;
};

template<class ContainerAllocator>
struct DataType< ::cola2_msgs::PilotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cola2_msgs/PilotGoal";
  }

  static const char* value(const ::cola2_msgs::PilotGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cola2_msgs::PilotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the REQUEST\n"
"\n"
"# Initial state\n"
"float64 initial_latitude\n"
"float64 initial_longitude\n"
"float64 initial_depth\n"
"\n"
"# Final state\n"
"float64 final_latitude\n"
"float64 final_longitude\n"
"float64 final_depth\n"
"float64 final_yaw\n"
"float64 final_altitude\n"
"\n"
"# Heave mode\n"
"uint64 heave_mode\n"
"uint64 DEPTH=0\n"
"uint64 ALTITUDE=1\n"
"uint64 BOTH=2\n"
"\n"
"# Surge velocity\n"
"float64 surge_velocity\n"
"\n"
"# Tolerance\n"
"float64 tolerance_xy\n"
"\n"
"# Timeout\n"
"float64 timeout\n"
"\n"
"# Controller type\n"
"uint64 controller_type\n"
"uint64 SECTION=0\n"
"uint64 ANCHOR=1\n"
"uint64 HOLONOMIC_KEEP_POSITION=2\n"
"\n"
"# Requester and priority\n"
"cola2_msgs/GoalDescriptor goal\n"
"\n"
"\n"
"================================================================================\n"
"MSG: cola2_msgs/GoalDescriptor\n"
"# Contains values common to all waypoint request and status messages.\n"
"# Waypoint goals with higher priority trump lower priority goals. For\n"
"# goals of the same priority, the pilot should follow the latest\n"
"# received.\n"
"\n"
"# Name of the requesting node, used with id to identify the request.\n"
"string requester\n"
"\n"
"uint32 priority\n"
"\n"
"# PRIORITY DEFINITIONS\n"
"uint32 PRIORITY_TELEOPERATION_LOW = 0\n"
"uint32 PRIORITY_SAFETY_LOW = 5\n"
"uint32 PRIORITY_NORMAL = 10\n"
"uint32 PRIORITY_SAFETY = 30\n"
"uint32 PRIORITY_TELEOPERATION = 40\n"
"uint32 PRIORITY_SAFETY_HIGH  = 50\n"
"uint32 PRIORITY_TELEOPERATION_HIGH = 60\n"
;
  }

  static const char* value(const ::cola2_msgs::PilotGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cola2_msgs::PilotGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.initial_latitude);
      stream.next(m.initial_longitude);
      stream.next(m.initial_depth);
      stream.next(m.final_latitude);
      stream.next(m.final_longitude);
      stream.next(m.final_depth);
      stream.next(m.final_yaw);
      stream.next(m.final_altitude);
      stream.next(m.heave_mode);
      stream.next(m.surge_velocity);
      stream.next(m.tolerance_xy);
      stream.next(m.timeout);
      stream.next(m.controller_type);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PilotGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cola2_msgs::PilotGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cola2_msgs::PilotGoal_<ContainerAllocator>& v)
  {
    s << indent << "initial_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.initial_latitude);
    s << indent << "initial_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.initial_longitude);
    s << indent << "initial_depth: ";
    Printer<double>::stream(s, indent + "  ", v.initial_depth);
    s << indent << "final_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.final_latitude);
    s << indent << "final_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.final_longitude);
    s << indent << "final_depth: ";
    Printer<double>::stream(s, indent + "  ", v.final_depth);
    s << indent << "final_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.final_yaw);
    s << indent << "final_altitude: ";
    Printer<double>::stream(s, indent + "  ", v.final_altitude);
    s << indent << "heave_mode: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.heave_mode);
    s << indent << "surge_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.surge_velocity);
    s << indent << "tolerance_xy: ";
    Printer<double>::stream(s, indent + "  ", v.tolerance_xy);
    s << indent << "timeout: ";
    Printer<double>::stream(s, indent + "  ", v.timeout);
    s << indent << "controller_type: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.controller_type);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::cola2_msgs::GoalDescriptor_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLA2_MSGS_MESSAGE_PILOTGOAL_H
