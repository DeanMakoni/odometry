// Generated by gencpp from file cola2_msgs/MissionState.msg
// DO NOT EDIT!


#ifndef COLA2_MSGS_MESSAGE_MISSIONSTATE_H
#define COLA2_MSGS_MESSAGE_MISSIONSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cola2_msgs
{
template <class ContainerAllocator>
struct MissionState_
{
  typedef MissionState_<ContainerAllocator> Type;

  MissionState_()
    : name()
    , current_step(0)
    , last_active()  {
    }
  MissionState_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , current_step(0)
    , last_active()  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef int32_t _current_step_type;
  _current_step_type current_step;

   typedef ros::Time _last_active_type;
  _last_active_type last_active;





  typedef boost::shared_ptr< ::cola2_msgs::MissionState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cola2_msgs::MissionState_<ContainerAllocator> const> ConstPtr;

}; // struct MissionState_

typedef ::cola2_msgs::MissionState_<std::allocator<void> > MissionState;

typedef boost::shared_ptr< ::cola2_msgs::MissionState > MissionStatePtr;
typedef boost::shared_ptr< ::cola2_msgs::MissionState const> MissionStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cola2_msgs::MissionState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cola2_msgs::MissionState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cola2_msgs::MissionState_<ContainerAllocator1> & lhs, const ::cola2_msgs::MissionState_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.current_step == rhs.current_step &&
    lhs.last_active == rhs.last_active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cola2_msgs::MissionState_<ContainerAllocator1> & lhs, const ::cola2_msgs::MissionState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cola2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::MissionState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cola2_msgs::MissionState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::MissionState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cola2_msgs::MissionState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::MissionState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cola2_msgs::MissionState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cola2_msgs::MissionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b22991b6c5683eeec05d46250572c6e6";
  }

  static const char* value(const ::cola2_msgs::MissionState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb22991b6c5683eeeULL;
  static const uint64_t static_value2 = 0xc05d46250572c6e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::cola2_msgs::MissionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cola2_msgs/MissionState";
  }

  static const char* value(const ::cola2_msgs::MissionState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cola2_msgs::MissionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"int32 current_step\n"
"time last_active\n"
;
  }

  static const char* value(const ::cola2_msgs::MissionState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cola2_msgs::MissionState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.current_step);
      stream.next(m.last_active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cola2_msgs::MissionState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cola2_msgs::MissionState_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "current_step: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_step);
    s << indent << "last_active: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.last_active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLA2_MSGS_MESSAGE_MISSIONSTATE_H
